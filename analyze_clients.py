import pandas as pd
import numpy as np
import glob
import json
from datetime import datetime

def analyze_all_clients():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
    clients_df = pd.read_csv('clients.csv')
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transaction_files = glob.glob('client_*_transactions_3m.csv')
    all_transactions = []
    for file in transaction_files:
        df = pd.read_csv(file)
        all_transactions.append(df)
    transactions_df = pd.concat(all_transactions, ignore_index=True)
    transactions_df['date'] = pd.to_datetime(transactions_df['date'])
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    transfer_files = glob.glob('client_*_transfers_3m.csv')
    all_transfers = []
    for file in transfer_files:
        df = pd.read_csv(file)
        all_transfers.append(df)
    transfers_df = pd.concat(all_transfers, ignore_index=True)
    transfers_df['date'] = pd.to_datetime(transfers_df['date'])
    
    recommendations = []
    
    for _, client in clients_df.iterrows():
        client_code = client['client_code']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
        client_transactions = transactions_df[transactions_df['client_code'] == client_code]
        client_transfers = transfers_df[transfers_df['client_code'] == client_code]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_spending = client_transactions.groupby('category')['amount'].sum().sort_values(ascending=False)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        transfer_analysis = client_transfers.groupby('type')['amount'].sum()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–≥–æ–¥—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        benefits = calculate_benefits(client, category_spending, transfer_analysis, client_transactions)
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –ø—Ä–æ–¥—É–∫—Ç
        if benefits:
            best_product = max(benefits.keys(), key=lambda x: benefits[x]['benefit'])
            best_benefit = benefits[best_product]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            push_message = generate_push_message(client['name'], best_product, category_spending, best_benefit)
            
            recommendations.append({
                'client_code': client_code,
                'name': client['name'],
                'status': client['status'],
                'age': client['age'],
                'city': client['city'],
                'balance': client['avg_monthly_balance_KZT'],
                'product': best_product,
                'benefit': best_benefit['benefit'],
                'reason': best_benefit['reason'],
                'push_notification': push_message
            })
    
    return recommendations

def calculate_benefits(client, category_spending, transfer_analysis, client_transactions):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—ã–≥–æ–¥—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    benefits = {}
    
    # –ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
    travel_spending = category_spending.get('–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', 0) + category_spending.get('–¢–∞–∫—Å–∏', 0) + category_spending.get('–û—Ç–µ–ª–∏', 0)
    travel_benefit = travel_spending * 0.04
    if travel_benefit > 0:
        benefits['–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π'] = {
            'benefit': travel_benefit,
            'reason': f"–ö–µ—à–±—ç–∫ 4% –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è: {travel_benefit:,.0f} ‚Ç∏"
        }
    
    # –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞
    total_spending = client_transactions['amount'].sum()
    premium_spending = category_spending.get('–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', 0) + category_spending.get('–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è', 0) + category_spending.get('–Æ–≤–µ–ª–∏—Ä–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è', 0)
    
    base_benefit = total_spending * 0.02
    premium_benefit = premium_spending * 0.04
    
    if client['avg_monthly_balance_KZT'] > 1000000:
        tier_multiplier = 1.5
    else:
        tier_multiplier = 1.0
        
    premium_total = (base_benefit + premium_benefit) * tier_multiplier
    if premium_total > 0:
        benefits['–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞'] = {
            'benefit': premium_total,
            'reason': f"–ö–µ—à–±—ç–∫ {2*tier_multiplier}% –Ω–∞ –≤—Å–µ + 4% –Ω–∞ –ª—é–∫—Å: {premium_total:,.0f} ‚Ç∏"
        }
    
    # –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞
    top_categories = list(category_spending.keys())[:3]
    favorite_benefit = sum([category_spending.get(cat, 0) * 0.10 for cat in top_categories])
    online_benefit = (category_spending.get('–ï–¥–∏–º –¥–æ–º–∞', 0) + category_spending.get('–°–º–æ—Ç—Ä–∏–º –¥–æ–º–∞', 0) + category_spending.get('–ò–≥—Ä–∞–µ–º –¥–æ–º–∞', 0)) * 0.10
    credit_total = favorite_benefit + online_benefit
    if credit_total > 0:
        benefits['–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞'] = {
            'benefit': credit_total,
            'reason': f"10% –≤ —Ç–æ–ø-–∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö + –æ–Ω–ª–∞–π–Ω: {credit_total:,.0f} ‚Ç∏"
        }
    
    # –û–±–º–µ–Ω –≤–∞–ª—é—Ç
    fx_volume = transfer_analysis.get('fx_buy', 0) + transfer_analysis.get('fx_sell', 0)
    fx_benefit = fx_volume * 0.005
    if fx_benefit > 0:
        benefits['–û–±–º–µ–Ω –≤–∞–ª—é—Ç'] = {
            'benefit': fx_benefit,
            'reason': f"–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –æ–±–º–µ–Ω–µ: {fx_benefit:,.0f} ‚Ç∏"
        }
    
    # –î–µ–ø–æ–∑–∏—Ç—ã
    balance = client['avg_monthly_balance_KZT']
    if balance > 500000:
        deposit_benefit = balance * 0.12 / 12
        benefits['–î–µ–ø–æ–∑–∏—Ç —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π'] = {
            'benefit': deposit_benefit,
            'reason': f"–î–æ—Ö–æ–¥ —Å –¥–µ–ø–æ–∑–∏—Ç–∞: {deposit_benefit:,.0f} ‚Ç∏/–º–µ—Å"
        }
    
    # –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
    if balance > 100000:
        invest_benefit = balance * 0.08 / 12
        benefits['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'] = {
            'benefit': invest_benefit,
            'reason': f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: {invest_benefit:,.0f} ‚Ç∏/–º–µ—Å"
        }
    
    return benefits

def generate_push_message(name, product, category_spending, benefit_info):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    templates = {
        "–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π": f"{name}, –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—Ü—ã –≤—ã –º–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ—Ç–µ –∏ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å —Ç–∞–∫—Å–∏. –° –∫–∞—Ä—Ç–æ–π –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –≤–µ—Ä–Ω—É–ª–∏ –±—ã {benefit_info['benefit']:,.0f} ‚Ç∏ –∫–µ—à–±—ç–∫–∞. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç—É.",
        "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞": f"{name}, —É –≤–∞—Å —Å—Ç–∞–±–∏–ª—å–Ω–æ –∫—Ä—É–ø–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞—Ç—ã –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö. –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–∞—Å—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π –∫–µ—à–±—ç–∫ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–Ω—è—Ç–∏—è. –û—Ñ–æ—Ä–º–∏—Ç–µ —Å–µ–π—á–∞—Å.",
        "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞": f"{name}, –≤–∞—à–∏ —Ç–æ–ø-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî {', '.join(list(category_spending.keys())[:3])}. –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–∞—ë—Ç –¥–æ 10% –≤ –ª—é–±–∏–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö. –û—Ñ–æ—Ä–º–∏—Ç–µ –∫–∞—Ä—Ç—É.",
        "–û–±–º–µ–Ω –≤–∞–ª—é—Ç": f"{name}, –≤—ã —á–∞—Å—Ç–æ –æ–±–º–µ–Ω–∏–≤–∞–µ—Ç–µ –≤–∞–ª—é—Ç—É. –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã–≥–æ–¥–Ω—ã–π –æ–±–º–µ–Ω –∏ –∞–≤—Ç–æ-–ø–æ–∫—É–ø–∫–∞ –ø–æ —Ü–µ–ª–µ–≤–æ–º—É –∫—É—Ä—Å—É. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–±–º–µ–Ω.",
        "–î–µ–ø–æ–∑–∏—Ç —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π": f"{name}, —É –≤–∞—Å –æ—Å—Ç–∞—é—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞. –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –∏—Ö –Ω–∞ –≤–∫–ª–∞–¥–µ ‚Äî —É–¥–æ–±–Ω–æ –∫–æ–ø–∏—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥.",
        "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": f"{name}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ —Å –Ω–∏–∑–∫–∏–º –ø–æ—Ä–æ–≥–æ–º –≤—Ö–æ–¥–∞ –∏ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π –Ω–∞ —Å—Ç–∞—Ä—Ç. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—á—ë—Ç."
    }
    
    return templates.get(product, f"{name}, —É –Ω–∞—Å –µ—Å—Ç—å –≤—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—Å. –£–∑–Ω–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")

if __name__ == "__main__":
    print("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ—Ö 60 –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    recommendations = analyze_all_clients()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
    with open('all_recommendations.json', 'w', encoding='utf-8') as f:
        json.dump(recommendations, f, ensure_ascii=False, indent=2)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
    df = pd.DataFrame(recommendations)
    df.to_csv('all_recommendations.csv', index=False)
    
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ–∑–¥–∞–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    print("üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: all_recommendations.json, all_recommendations.csv")
