#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è ML –∞–Ω–∞–ª–∏–∑–∞ BCC Bank
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ ML
"""

import pandas as pd
import numpy as np
from ml_analyzer import MLBankAnalyzer
import json
from datetime import datetime

def print_header(title):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print("\n" + "="*60)
    print(f"ü§ñ {title}")
    print("="*60)

def print_section(title):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
    print(f"\nüìä {title}")
    print("-" * 40)

def main():
    print_header("BCC Bank ML Analysis Demo")
    print("–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ + Machine Learning")
    print("–î–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞ - —É–≤–µ—Ä–µ–Ω–Ω—ã–π PoC")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = MLBankAnalyzer()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print_section("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    if not analyzer.load_data():
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    print_section("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    features_df = analyzer.create_advanced_features()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(features_df.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    print(f"üìà –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {list(features_df.columns[:10])}")
    
    # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
    print_section("–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")
    clusters = analyzer.perform_clustering()
    print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(set(clusters))} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
    
    # –û–±—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    print_section("–û–±—É—á–µ–Ω–∏–µ ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞")
    accuracy = analyzer.train_product_classifier()
    print(f"‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {accuracy:.3f} ({accuracy*100:.1f}%)")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print_section("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    recommendations = analyzer.generate_ml_recommendations()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print_section("–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
    product_counts = pd.Series([rec['product'] for rec in recommendations]).value_counts()
    print("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º:")
    for product, count in product_counts.items():
        print(f"   {product}: {count} –∫–ª–∏–µ–Ω—Ç–æ–≤ ({count/len(recommendations)*100:.1f}%)")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    confidences = [rec['confidence'] for rec in recommendations]
    print(f"\nüéØ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:")
    print(f"   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {np.mean(confidences):.3f}")
    print(f"   –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (>80%): {sum(1 for c in confidences if c > 0.8)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
    print(f"   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (60-80%): {sum(1 for c in confidences if 0.6 <= c <= 0.8)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
    print(f"   –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (<60%): {sum(1 for c in confidences if c < 0.6)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º
    cluster_counts = pd.Series([rec['cluster'] for rec in recommendations]).value_counts()
    print(f"\nüîç –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º:")
    for cluster, count in cluster_counts.items():
        print(f"   –ö–ª–∞—Å—Ç–µ—Ä {cluster}: {count} –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    # –¢–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print_section("–¢–æ–ø-5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é")
    top_recommendations = sorted(recommendations, key=lambda x: x['confidence'], reverse=True)[:5]
    
    for i, rec in enumerate(top_recommendations, 1):
        print(f"\n{i}. {rec['name']} (ID: {rec['client_code']})")
        print(f"   –ü—Ä–æ–¥—É–∫—Ç: {rec['product']}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {rec['confidence']:.1%}")
        print(f"   –í—ã–≥–æ–¥–∞: {rec['benefit']:,.0f} ‚Ç∏")
        print(f"   –ö–ª–∞—Å—Ç–µ—Ä: {rec['cluster']}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {rec['push_notification'][:100]}...")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º –ø–æ–¥—Ö–æ–¥–æ–º
    print_section("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ ML vs –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    try:
        with open('all_recommendations.json', 'r', encoding='utf-8') as f:
            classic_recommendations = json.load(f)
        
        classic_products = [rec['product'] for rec in classic_recommendations]
        ml_products = [rec['product'] for rec in recommendations]
        
        print("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤:")
        print("   –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥:")
        classic_counts = pd.Series(classic_products).value_counts()
        for product, count in classic_counts.items():
            print(f"     {product}: {count} ({count/len(classic_products)*100:.1f}%)")
        
        print("   ML –ø–æ–¥—Ö–æ–¥:")
        ml_counts = pd.Series(ml_products).value_counts()
        for product, count in ml_counts.items():
            print(f"     {product}: {count} ({count/len(ml_products)*100:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π
        print("\nüîÑ –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π:")
        different_recommendations = 0
        for i, (classic, ml) in enumerate(zip(classic_products, ml_products)):
            if classic != ml:
                different_recommendations += 1
        
        print(f"   –†–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {different_recommendations}/{len(classic_products)} ({different_recommendations/len(classic_products)*100:.1f}%)")
        
    except FileNotFoundError:
        print("   –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print_section("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    ml_df = pd.DataFrame(recommendations)
    ml_df.to_csv('ml_recommendations_demo.csv', index=False, encoding='utf-8-sig')
    print("‚úÖ ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ml_recommendations_demo.csv")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    report = {
        'timestamp': datetime.now().isoformat(),
        'total_clients': len(recommendations),
        'accuracy': accuracy,
        'clusters_count': len(set(clusters)),
        'features_count': len(features_df.columns),
        'product_distribution': product_counts.to_dict(),
        'confidence_stats': {
            'mean': float(np.mean(confidences)),
            'high_confidence': int(sum(1 for c in confidences if c > 0.8)),
            'medium_confidence': int(sum(1 for c in confidences if 0.6 <= c <= 0.8)),
            'low_confidence': int(sum(1 for c in confidences if c < 0.6))
        },
        'cluster_distribution': cluster_counts.to_dict(),
        'top_recommendations': top_recommendations[:10]
    }
    
    with open('ml_analysis_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    print("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ml_analysis_report.json")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
    print_header("–ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞")
    print("üéØ ML –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(recommendations)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
    print(f"üß† –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {accuracy:.1%}")
    print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {len(set(clusters))}")
    print(f"‚öôÔ∏è –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(features_df.columns)}")
    print(f"üí° –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {sum(1 for c in confidences if c > 0.8)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    
    print("\nüöÄ –ì–æ—Ç–æ–≤–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ö–∞–∫–∞—Ç–æ–Ω–µ!")
    print("   - –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã + ML")
    print("   - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print("   - –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")
    print("   - –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")

if __name__ == "__main__":
    main()
