import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import glob
from sklearn.cluster import KMeans, DBSCAN
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, silhouette_score
from sklearn.neighbors import NearestNeighbors
from scipy import stats
from scipy.cluster.hierarchy import dendrogram, linkage, fcluster
import warnings
warnings.filterwarnings('ignore')

class MLBankAnalyzer:
    def __init__(self):
        self.clients_df = None
        self.transactions_df = None
        self.transfers_df = None
        self.scaler = StandardScaler()
        self.label_encoders = {}
        self.models = {}
        self.clusters = None
        self.feature_importance = None
        
        # –ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        self.products = {
            "–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π": {"categories": ["–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–¢–∞–∫—Å–∏", "–û—Ç–µ–ª–∏"], "cashback": 0.04},
            "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞": {"categories": ["–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", "–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è", "–Æ–≤–µ–ª–∏—Ä–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è"], "cashback": 0.03},
            "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞": {"categories": ["–ï–¥–∏–º –¥–æ–º–∞", "–°–º–æ—Ç—Ä–∏–º –¥–æ–º–∞", "–ò–≥—Ä–∞–µ–º –¥–æ–º–∞"], "cashback": 0.10},
            "–û–±–º–µ–Ω –≤–∞–ª—é—Ç": {"signals": ["fx_buy", "fx_sell"], "savings": 0.005},
            "–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏": {"signals": ["loan_payment_out"], "rate": 0.15},
            "–î–µ–ø–æ–∑–∏—Ç –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π": {"signals": ["fx_buy", "fx_sell"], "rate": 0.08},
            "–î–µ–ø–æ–∑–∏—Ç —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π": {"signals": ["deposit_topup_out"], "rate": 0.12},
            "–î–µ–ø–æ–∑–∏—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π": {"signals": ["deposit_topup_out"], "rate": 0.10},
            "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": {"signals": ["invest_out", "invest_in"], "rate": 0.08},
            "–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏": {"signals": ["gold_buy_out", "gold_sell_in"], "rate": 0.05}
        }
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
            self.clients_df = pd.read_csv('clients.csv')
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transaction_files = glob.glob('client_*_transactions_3m.csv')
            all_transactions = []
            for file in transaction_files:
                df = pd.read_csv(file)
                all_transactions.append(df)
            self.transactions_df = pd.concat(all_transactions, ignore_index=True)
            self.transactions_df['date'] = pd.to_datetime(self.transactions_df['date'])
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
            transfer_files = glob.glob('client_*_transfers_3m.csv')
            all_transfers = []
            for file in transfer_files:
                df = pd.read_csv(file)
                all_transfers.append(df)
            self.transfers_df = pd.concat(all_transfers, ignore_index=True)
            self.transfers_df['date'] = pd.to_datetime(self.transfers_df['date'])
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.clients_df)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.transactions_df)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.transfers_df)} –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def create_advanced_features(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è ML"""
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
        
        features_list = []
        
        for _, client in self.clients_df.iterrows():
            client_code = client['client_code']
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            client_transactions = self.transactions_df[
                self.transactions_df['client_code'] == client_code
            ].copy()
            client_transfers = self.transfers_df[
                self.transfers_df['client_code'] == client_code
            ].copy()
            
            # === –ö–õ–ê–°–°–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ó–ù–ê–ö–ò ===
            features = {
                'client_code': client_code,
                'age': client['age'],
                'balance': client['avg_monthly_balance_KZT'],
                'status_encoded': self._encode_status(client['status']),
                'city_encoded': self._encode_city(client['city'])
            }
            
            # === –í–†–ï–ú–ï–ù–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò ===
            if not client_transactions.empty:
                client_transactions['hour'] = client_transactions['date'].dt.hour
                client_transactions['day_of_week'] = client_transactions['date'].dt.dayofweek
                client_transactions['month'] = client_transactions['date'].dt.month
                
                # –ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                features['transactions_per_day'] = len(client_transactions) / 90
                features['avg_transaction_amount'] = client_transactions['amount'].mean()
                features['transaction_std'] = client_transactions['amount'].std()
                features['max_transaction'] = client_transactions['amount'].max()
                features['min_transaction'] = client_transactions['amount'].min()
                
                # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                features['weekend_ratio'] = (client_transactions['day_of_week'] >= 5).mean()
                features['night_ratio'] = ((client_transactions['hour'] >= 22) | (client_transactions['hour'] <= 6)).mean()
                features['morning_ratio'] = ((client_transactions['hour'] >= 6) & (client_transactions['hour'] <= 12)).mean()
                
                # –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
                features['june_spending'] = client_transactions[client_transactions['month'] == 6]['amount'].sum()
                features['july_spending'] = client_transactions[client_transactions['month'] == 7]['amount'].sum()
                features['august_spending'] = client_transactions[client_transactions['month'] == 8]['amount'].sum()
            
            # === –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–ï –ü–†–ò–ó–ù–ê–ö–ò ===
            if not client_transactions.empty:
                # –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                category_spending = client_transactions.groupby('category')['amount'].sum()
                features['category_diversity'] = len(category_spending)
                features['top_category_ratio'] = category_spending.max() / category_spending.sum() if category_spending.sum() > 0 else 0
                
                # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                features['travel_spending'] = category_spending.get('–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', 0) + category_spending.get('–¢–∞–∫—Å–∏', 0) + category_spending.get('–û—Ç–µ–ª–∏', 0)
                features['food_spending'] = category_spending.get('–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è', 0) + category_spending.get('–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', 0)
                features['online_spending'] = category_spending.get('–ï–¥–∏–º –¥–æ–º–∞', 0) + category_spending.get('–°–º–æ—Ç—Ä–∏–º –¥–æ–º–∞', 0) + category_spending.get('–ò–≥—Ä–∞–µ–º –¥–æ–º–∞', 0)
                features['luxury_spending'] = category_spending.get('–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è', 0) + category_spending.get('–Æ–≤–µ–ª–∏—Ä–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è', 0)
                
                # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                total_spending = category_spending.sum()
                features['travel_ratio'] = features['travel_spending'] / total_spending if total_spending > 0 else 0
                features['food_ratio'] = features['food_spending'] / total_spending if total_spending > 0 else 0
                features['online_ratio'] = features['online_spending'] / total_spending if total_spending > 0 else 0
                features['luxury_ratio'] = features['luxury_spending'] / total_spending if total_spending > 0 else 0
            
            # === –§–ò–ù–ê–ù–°–û–í–´–ï –ü–†–ò–ó–ù–ê–ö–ò ===
            if not client_transfers.empty:
                transfer_analysis = client_transfers.groupby('type')['amount'].sum()
                
                # –¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π
                features['atm_withdrawals'] = transfer_analysis.get('atm_withdrawal', 0)
                features['p2p_transfers'] = transfer_analysis.get('p2p_out', 0) + transfer_analysis.get('p2p_in', 0)
                features['fx_operations'] = transfer_analysis.get('fx_buy', 0) + transfer_analysis.get('fx_sell', 0)
                features['deposit_operations'] = transfer_analysis.get('deposit_topup_out', 0) + transfer_analysis.get('deposit_topup_in', 0)
                features['investment_operations'] = transfer_analysis.get('invest_out', 0) + transfer_analysis.get('invest_in', 0)
                features['gold_operations'] = transfer_analysis.get('gold_buy_out', 0) + transfer_analysis.get('gold_sell_in', 0)
                
                # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                total_transfers = transfer_analysis.sum()
                features['atm_ratio'] = features['atm_withdrawals'] / total_transfers if total_transfers > 0 else 0
                features['fx_ratio'] = features['fx_operations'] / total_transfers if total_transfers > 0 else 0
                features['investment_ratio'] = features['investment_operations'] / total_transfers if total_transfers > 0 else 0
            
            # === –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ó–ù–ê–ö–ò ===
            if not client_transactions.empty:
                # –ö–≤–∞–Ω—Ç–∏–ª–∏ —Ç—Ä–∞—Ç
                amounts = client_transactions['amount'].values
                features['q25'] = np.percentile(amounts, 25)
                features['q50'] = np.percentile(amounts, 50)
                features['q75'] = np.percentile(amounts, 75)
                features['q90'] = np.percentile(amounts, 90)
                
                # –ê—Å–∏–º–º–µ—Ç—Ä–∏—è –∏ —ç–∫—Å—Ü–µ—Å—Å
                features['skewness'] = stats.skew(amounts)
                features['kurtosis'] = stats.kurtosis(amounts)
                
                # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
                features['cv'] = client_transactions['amount'].std() / client_transactions['amount'].mean() if client_transactions['amount'].mean() > 0 else 0
            
            # === ML-–ü–†–ò–ó–ù–ê–ö–ò (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è) ===
            # –ò–Ω–¥–µ–∫—Å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ (—á–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
            features['loyalty_index'] = len(client_transactions) / 90  # —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –¥–µ–Ω—å
            
            # –ò–Ω–¥–µ–∫—Å —Ä–∏—Å–∫–∞ (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–∞—Ç)
            if not client_transactions.empty:
                features['risk_index'] = client_transactions['amount'].std() / client_transactions['amount'].mean() if client_transactions['amount'].mean() > 0 else 0
            
            # –ò–Ω–¥–µ–∫—Å —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ —Ç—Ä–∞—Ç)
            monthly_spending = client_transactions['amount'].sum() / 3  # –∑–∞ 3 –º–µ—Å—è—Ü–∞
            features['savings_index'] = client['avg_monthly_balance_KZT'] / monthly_spending if monthly_spending > 0 else 0
            
            # –ò–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π)
            features['activity_index'] = len(client_transfers['type'].unique()) if not client_transfers.empty else 0
            
            features_list.append(features)
        
        self.features_df = pd.DataFrame(features_list)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.features_df.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {len(self.features_df)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
        return self.features_df
    
    def _encode_status(self, status):
        """–ö–æ–¥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞"""
        if status not in self.label_encoders:
            self.label_encoders['status'] = LabelEncoder()
            self.label_encoders['status'].fit(['–°—Ç—É–¥–µ–Ω—Ç', '–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç', '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç'])
        return self.label_encoders['status'].transform([status])[0]
    
    def _encode_city(self, city):
        """–ö–æ–¥–∏—Ä—É–µ—Ç –≥–æ—Ä–æ–¥"""
        if 'city' not in self.label_encoders:
            self.label_encoders['city'] = LabelEncoder()
            self.label_encoders['city'].fit(self.clients_df['city'].unique())
        return self.label_encoders['city'].transform([city])[0]
    
    def perform_clustering(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        print("üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤...")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        feature_columns = [col for col in self.features_df.columns if col != 'client_code']
        X = self.features_df[feature_columns].fillna(0)
        X_scaled = self.scaler.fit_transform(X)
        
        # K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
        kmeans = KMeans(n_clusters=5, random_state=42, n_init=10)
        kmeans_labels = kmeans.fit_predict(X_scaled)
        
        # DBSCAN –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
        dbscan = DBSCAN(eps=0.5, min_samples=3)
        dbscan_labels = dbscan.fit_predict(X_scaled)
        
        # –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
        linkage_matrix = linkage(X_scaled, method='ward')
        hierarchical_labels = fcluster(linkage_matrix, t=5, criterion='maxclust')
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é –ø–æ silhouette score
        kmeans_score = silhouette_score(X_scaled, kmeans_labels)
        dbscan_score = silhouette_score(X_scaled, dbscan_labels) if len(set(dbscan_labels)) > 1 else -1
        hierarchical_score = silhouette_score(X_scaled, hierarchical_labels)
        
        scores = {
            'K-means': kmeans_score,
            'DBSCAN': dbscan_score,
            'Hierarchical': hierarchical_score
        }
        
        best_method = max(scores, key=scores.get)
        print(f"üèÜ –õ—É—á—à–∏–π –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏: {best_method} (score: {scores[best_method]:.3f})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if best_method == 'K-means':
            self.clusters = kmeans_labels
        elif best_method == 'DBSCAN':
            self.clusters = dbscan_labels
        else:
            self.clusters = hierarchical_labels
        
        self.features_df['cluster'] = self.clusters
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã
        self._analyze_clusters()
        
        return self.clusters
    
    def _analyze_clusters(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"""
        print("\nüìä –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤:")
        cluster_stats = self.features_df.groupby('cluster').agg({
            'age': 'mean',
            'balance': 'mean',
            'travel_ratio': 'mean',
            'online_ratio': 'mean',
            'luxury_ratio': 'mean',
            'savings_index': 'mean',
            'activity_index': 'mean'
        }).round(2)
        
        for cluster_id in sorted(self.features_df['cluster'].unique()):
            if cluster_id == -1:  # DBSCAN outliers
                print(f"üî¥ –ö–ª–∞—Å—Ç–µ—Ä {cluster_id} (–ê–Ω–æ–º–∞–ª–∏–∏): {len(self.features_df[self.features_df['cluster'] == cluster_id])} –∫–ª–∏–µ–Ω—Ç–æ–≤")
            else:
                stats = cluster_stats.loc[cluster_id]
                print(f"üü¢ –ö–ª–∞—Å—Ç–µ—Ä {cluster_id}: {len(self.features_df[self.features_df['cluster'] == cluster_id])} –∫–ª–∏–µ–Ω—Ç–æ–≤")
                print(f"   –í–æ–∑—Ä–∞—Å—Ç: {stats['age']:.1f}, –ë–∞–ª–∞–Ω—Å: {stats['balance']:,.0f} ‚Ç∏")
                print(f"   –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è: {stats['travel_ratio']:.1%}, –û–Ω–ª–∞–π–Ω: {stats['online_ratio']:.1%}, –õ—é–∫—Å: {stats['luxury_ratio']:.1%}")
    
    def train_product_classifier(self):
        """–û–±—É—á–∞–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        print("ü§ñ –û–±—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–∞–≤–∏–ª
        y = []
        for _, client in self.features_df.iterrows():
            client_code = client['client_code']
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            client_transactions = self.transactions_df[
                self.transactions_df['client_code'] == client_code
            ]
            client_transfers = self.transfers_df[
                self.transfers_df['client_code'] == client_code
            ]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–≥–æ–¥—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
            benefits = self._calculate_benefits_ml(client, client_transactions, client_transfers)
            
            if benefits:
                best_product = max(benefits.keys(), key=lambda x: benefits[x])
                y.append(best_product)
            else:
                y.append('–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞')  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        feature_columns = [col for col in self.features_df.columns if col not in ['client_code', 'cluster']]
        X = self.features_df[feature_columns].fillna(0)
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        
        # Random Forest
        rf = RandomForestClassifier(n_estimators=100, random_state=42)
        rf.fit(X_train, y_train)
        rf_score = rf.score(X_test, y_test)
        
        # Gradient Boosting
        gb = GradientBoostingClassifier(n_estimators=100, random_state=42)
        gb.fit(X_train, y_train)
        gb_score = gb.score(X_test, y_test)
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
        if rf_score >= gb_score:
            self.models['classifier'] = rf
            best_score = rf_score
            print(f"üèÜ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: Random Forest (—Ç–æ—á–Ω–æ—Å—Ç—å: {best_score:.3f})")
        else:
            self.models['classifier'] = gb
            best_score = gb_score
            print(f"üèÜ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: Gradient Boosting (—Ç–æ—á–Ω–æ—Å—Ç—å: {best_score:.3f})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        self.feature_importance = pd.DataFrame({
            'feature': feature_columns,
            'importance': self.models['classifier'].feature_importances_
        }).sort_values('importance', ascending=False)
        
        print("\nüîù –¢–æ–ø-10 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
        for i, (_, row) in enumerate(self.feature_importance.head(10).iterrows()):
            print(f"{i+1:2d}. {row['feature']}: {row['importance']:.3f}")
        
        return best_score
    
    def _calculate_benefits_ml(self, client, transactions, transfers):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—ã–≥–æ–¥—É –æ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è ML"""
        benefits = {}
        
        if not transactions.empty:
            category_spending = transactions.groupby('category')['amount'].sum()
            total_spending = category_spending.sum()
        else:
            category_spending = pd.Series()
            total_spending = 0
        
        if not transfers.empty:
            transfer_analysis = transfers.groupby('type')['amount'].sum()
        else:
            transfer_analysis = pd.Series()
        
        # –ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
        travel_spending = category_spending.get('–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', 0) + category_spending.get('–¢–∞–∫—Å–∏', 0) + category_spending.get('–û—Ç–µ–ª–∏', 0)
        benefits['–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π'] = travel_spending * 0.04
        
        # –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞
        premium_spending = category_spending.get('–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', 0) + category_spending.get('–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è', 0) + category_spending.get('–Æ–≤–µ–ª–∏—Ä–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è', 0)
        base_benefit = total_spending * 0.02
        premium_benefit = premium_spending * 0.04
        tier_multiplier = 1.5 if client['balance'] > 1000000 else 1.0
        benefits['–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞'] = (base_benefit + premium_benefit) * tier_multiplier
        
        # –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞
        top_categories = list(category_spending.keys())[:3]
        favorite_benefit = sum([category_spending.get(cat, 0) * 0.10 for cat in top_categories])
        online_benefit = (category_spending.get('–ï–¥–∏–º –¥–æ–º–∞', 0) + category_spending.get('–°–º–æ—Ç—Ä–∏–º –¥–æ–º–∞', 0) + category_spending.get('–ò–≥—Ä–∞–µ–º –¥–æ–º–∞', 0)) * 0.10
        benefits['–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞'] = favorite_benefit + online_benefit
        
        # –û–±–º–µ–Ω –≤–∞–ª—é—Ç
        fx_volume = transfer_analysis.get('fx_buy', 0) + transfer_analysis.get('fx_sell', 0)
        benefits['–û–±–º–µ–Ω –≤–∞–ª—é—Ç'] = fx_volume * 0.005
        
        # –î–µ–ø–æ–∑–∏—Ç—ã
        balance = client['balance']
        if balance > 500000:
            benefits['–î–µ–ø–æ–∑–∏—Ç —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π'] = balance * 0.12 / 12
        if balance > 100000:
            benefits['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'] = balance * 0.08 / 12
        
        return benefits
    
    def generate_ml_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ML"""
        print("üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ML-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
        
        recommendations = []
        
        for _, client in self.features_df.iterrows():
            client_code = client['client_code']
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            client_transactions = self.transactions_df[
                self.transactions_df['client_code'] == client_code
            ]
            client_transfers = self.transfers_df[
                self.transfers_df['client_code'] == client_code
            ]
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å –ø–æ–º–æ—â—å—é ML
            feature_columns = [col for col in self.features_df.columns if col not in ['client_code', 'cluster']]
            X = client[feature_columns].fillna(0).values.reshape(1, -1)
            
            predicted_product = self.models['classifier'].predict(X)[0]
            prediction_proba = self.models['classifier'].predict_proba(X)[0]
            confidence = max(prediction_proba)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–≥–æ–¥—É
            benefits = self._calculate_benefits_ml(client, client_transactions, client_transfers)
            benefit = benefits.get(predicted_product, 0)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            client_name = self.clients_df[self.clients_df['client_code'] == client_code]['name'].iloc[0]
            message = self._generate_ml_message(client_name, predicted_product, client, benefit, confidence)
            
            recommendations.append({
                'client_code': client_code,
                'name': client_name,
                'product': predicted_product,
                'benefit': benefit,
                'confidence': confidence,
                'cluster': client['cluster'],
                'push_notification': message
            })
        
        return recommendations
    
    def _generate_ml_message(self, name, product, client, benefit, confidence):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ ML –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
        insights = self._get_client_insights(client)
        
        # –ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏–Ω—Å–∞–π—Ç–∞–º–∏ –ò–ò
        templates = {
            "–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π": [
                f"{name}, –Ω–∞—à –ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à–∏ —Ç—Ä–∞—Ç—ã –∏ –æ–±–Ω–∞—Ä—É–∂–∏–ª: –≤—ã —Ç—Ä–∞—Ç–∏—Ç–µ {insights['travel_spending']:,.0f} ‚Ç∏ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ —Ç–∞–∫—Å–∏! –≠—Ç–æ {insights['travel_ratio']:.1%} –æ—Ç –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ç—Ä–∞—Ç. –° –∫–∞—Ä—Ç–æ–π –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –≤—ã –≤–µ—Ä–Ω–µ—Ç–µ {benefit:,.0f} ‚Ç∏ –∫–µ—à–±—ç–∫–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ. –û—Ñ–æ—Ä–º–∏—Ç–µ –∫–∞—Ä—Ç—É –∑–∞ 2 –º–∏–Ω—É—Ç—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!",
                f"{name}, –ò–ò –≤—ã—è–≤–∏–ª –≤–∞—à –ø–∞—Ç—Ç–µ—Ä–Ω: {insights['travel_frequency']} –ø–æ–µ–∑–¥–æ–∫ –≤ –º–µ—Å—è—Ü –Ω–∞ —Ç–∞–∫—Å–∏ –∏ –æ—Ç–µ–ª–∏. –í—ã –≤ —Ç–æ–ø-{insights['travel_percentile']}% –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤! –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π —Å 4% –∫–µ—à–±—ç–∫–æ–º —Å—ç–∫–æ–Ω–æ–º–∏—Ç –≤–∞–º {benefit:,.0f} ‚Ç∏/–º–µ—Å. –ù–∞—á–Ω–∏—Ç–µ —ç–∫–æ–Ω–æ–º–∏—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!",
                f"{name}, –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞–∑–∞–ª: –≤—ã –∞–∫—Ç–∏–≤–Ω—ã–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ —Å —Ç—Ä–∞—Ç–∞–º–∏ {insights['travel_spending']:,.0f} ‚Ç∏/–º–µ—Å. –ù–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –¥–∞—Å—Ç –≤–∞–º {benefit:,.0f} ‚Ç∏ –∫–µ—à–±—ç–∫–∞ + –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–Ω—è—Ç–∏—è –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞—Ö. –û—Ñ–æ—Ä–º–∏—Ç–µ —Å–µ–π—á–∞—Å!"
            ],
            "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞": [
                f"{name}, –Ω–∞—à –ò–ò –æ–ø—Ä–µ–¥–µ–ª–∏–ª –≤–∞—Å –∫–∞–∫ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞! –ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞–ª: –±–∞–ª–∞–Ω—Å {client['balance']:,.0f} ‚Ç∏, —Ç—Ä–∞—Ç—ã –Ω–∞ –ª—é–∫—Å {insights['luxury_spending']:,.0f} ‚Ç∏/–º–µ—Å ({insights['luxury_ratio']:.1%} –æ—Ç –≤—Å–µ—Ö —Ç—Ä–∞—Ç). –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å 3% –∫–µ—à–±—ç–∫–æ–º –≤–µ—Ä–Ω–µ—Ç –≤–∞–º {benefit:,.0f} ‚Ç∏/–º–µ—Å + –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–Ω—è—Ç–∏—è. –°—Ç–∞–Ω—å—Ç–µ VIP-–∫–ª–∏–µ–Ω—Ç–æ–º!",
                f"{name}, –ò–ò –≤—ã—è–≤–∏–ª –≤–∞—à —Å—Ç–∞—Ç—É—Å: –≤—ã —Ç—Ä–∞—Ç–∏—Ç–µ {insights['luxury_spending']:,.0f} ‚Ç∏ –Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ —é–≤–µ–ª–∏—Ä–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è - —ç—Ç–æ {insights['luxury_ratio']:.1%} –æ—Ç –≤—Å–µ—Ö —Ç—Ä–∞—Ç! –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º –∫–µ—à–±—ç–∫–æ–º –¥–∞—Å—Ç –≤–∞–º {benefit:,.0f} ‚Ç∏/–º–µ—Å. –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞ 1 –º–∏–Ω—É—Ç—É!",
                f"{name}, –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–ª: –≤—ã —Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ç—Ä–∞—Ç–∏—Ç–µ {insights['luxury_spending']:,.0f} ‚Ç∏ –Ω–∞ –ø—Ä–µ–º–∏—É–º-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å 3% –∫–µ—à–±—ç–∫–æ–º + –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –≤–µ—Ä–Ω–µ—Ç {benefit:,.0f} ‚Ç∏/–º–µ—Å. –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤—ã–≥–æ–¥—É!"
            ],
            "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞": [
                f"{name}, –ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à–∏ —Ç—Ä–∞—Ç—ã –∏ –æ–±–Ω–∞—Ä—É–∂–∏–ª —Ç–æ–ø-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {insights['top_categories']}. –í—ã —Ç—Ä–∞—Ç–∏—Ç–µ {insights['favorite_spending']:,.0f} ‚Ç∏ –≤ —ç—Ç–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö! –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å 10% –∫–µ—à–±—ç–∫–æ–º –≤ –ª—é–±–∏–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –≤–µ—Ä–Ω–µ—Ç –≤–∞–º {benefit:,.0f} ‚Ç∏/–º–µ—Å. –û—Ñ–æ—Ä–º–∏—Ç–µ –∫–∞—Ä—Ç—É –æ–Ω–ª–∞–π–Ω –∑–∞ 3 –º–∏–Ω—É—Ç—ã!",
                f"{name}, –Ω–∞—à –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã—è–≤–∏–ª –≤–∞—à –ø–∞—Ç—Ç–µ—Ä–Ω: {insights['online_ratio']:.1%} —Ç—Ä–∞—Ç –æ–Ω–ª–∞–π–Ω ({insights['online_spending']:,.0f} ‚Ç∏/–º–µ—Å). –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å 10% –∫–µ—à–±—ç–∫–æ–º –Ω–∞ –æ–Ω–ª–∞–π–Ω-–ø–æ–∫—É–ø–∫–∏ —Å—ç–∫–æ–Ω–æ–º–∏—Ç –≤–∞–º {benefit:,.0f} ‚Ç∏/–º–µ—Å. –ù–∞—á–Ω–∏—Ç–µ —ç–∫–æ–Ω–æ–º–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
                f"{name}, –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞–ª: –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - {insights['top_categories']} —Å —Ç—Ä–∞—Ç–∞–º–∏ {insights['favorite_spending']:,.0f} ‚Ç∏/–º–µ—Å. –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–µ—à–±—ç–∫–æ–º 10% –≤–µ—Ä–Ω–µ—Ç {benefit:,.0f} ‚Ç∏/–º–µ—Å. –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞ 2 –∫–ª–∏–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!"
            ],
            "–û–±–º–µ–Ω –≤–∞–ª—é—Ç": [
                f"{name}, –ò–ò –æ–±–Ω–∞—Ä—É–∂–∏–ª –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≤–∞–ª—é—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö: {insights['fx_volume']:,.0f} ‚Ç∏ –∑–∞ 3 –º–µ—Å—è—Ü–∞! –≠—Ç–æ {insights['fx_ratio']:.1%} –æ—Ç –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π. –ù–∞—à –æ–±–º–µ–Ω –≤–∞–ª—é—Ç —Å –≤—ã–≥–æ–¥–Ω—ã–º –∫—É—Ä—Å–æ–º —Å—ç–∫–æ–Ω–æ–º–∏—Ç –≤–∞–º {benefit:,.0f} ‚Ç∏. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ-–æ–±–º–µ–Ω –ø–æ —Ü–µ–ª–µ–≤–æ–º—É –∫—É—Ä—Å—É!",
                f"{name}, –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ–∫–∞–∑–∞–ª: –≤—ã —á–∞—Å—Ç–æ –æ–±–º–µ–Ω–∏–≤–∞–µ—Ç–µ –≤–∞–ª—é—Ç—É ({insights['fx_operations']} –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ 3 –º–µ—Å—è—Ü–∞). –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ —Å—ç–∫–æ–Ω–æ–º–∏—Ç {benefit:,.0f} ‚Ç∏. –ü–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–≥–æ–¥–Ω–æ–º –∫—É—Ä—Å–µ!",
                f"{name}, –ò–ò –≤—ã—è–≤–∏–ª –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –≤–∞–ª—é—Ç–Ω—ã–º –æ–ø–µ—Ä–∞—Ü–∏—è–º: {insights['fx_volume']:,.0f} ‚Ç∏ –∑–∞ –ø–µ—Ä–∏–æ–¥. –ù–∞—à –æ–±–º–µ–Ω –≤–∞–ª—é—Ç —Å –ª—É—á—à–∏–º –∫—É—Ä—Å–æ–º –≤ –≥–æ—Ä–æ–¥–µ —Å—ç–∫–æ–Ω–æ–º–∏—Ç {benefit:,.0f} ‚Ç∏. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–±–º–µ–Ω –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
            ],
            "–î–µ–ø–æ–∑–∏—Ç —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π": [
                f"{name}, –Ω–∞—à –ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à –±–∞–ª–∞–Ω—Å {client['balance']:,.0f} ‚Ç∏ –∏ –∏–Ω–¥–µ–∫—Å —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π {insights['savings_index']:.1f}. –í—ã –∏–¥–µ–∞–ª—å–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞! –°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π –≤–∫–ª–∞–¥ —Å 12% –≥–æ–¥–æ–≤—ã—Ö –ø—Ä–∏–Ω–µ—Å–µ—Ç {benefit:,.0f} ‚Ç∏/–º–µ—Å –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥ –∑–∞ 1 –º–∏–Ω—É—Ç—É!",
                f"{name}, –ò–ò –≤—ã—è–≤–∏–ª –≤–∞—à –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å {client['balance']:,.0f} ‚Ç∏ –∏ –Ω–∏–∑–∫–∏–µ —Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è. –î–µ–ø–æ–∑–∏—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π 12% –¥–∞—Å—Ç –≤–∞–º {benefit:,.0f} ‚Ç∏/–º–µ—Å. –£–≤–µ–ª–∏—á—å—Ç–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π!",
                f"{name}, –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞–ª: —É –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ {client['balance']:,.0f} ‚Ç∏. –°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç —Å 12% –≥–æ–¥–æ–≤—ã—Ö –ø—Ä–∏–Ω–µ—Å–µ—Ç {benefit:,.0f} ‚Ç∏/–º–µ—Å. –ù–µ —Ç–µ—Ä—è–π—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –∏–Ω—Ñ–ª—è—Ü–∏–∏ - –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –¥–µ–ø–æ–∑–∏—Ç!"
            ],
            "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": [
                f"{name}, –ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –æ–±–Ω–∞—Ä—É–∂–∏–ª: –±–∞–ª–∞–Ω—Å {client['balance']:,.0f} ‚Ç∏, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {insights['activity_index']} –æ–ø–µ—Ä–∞—Ü–∏–π, –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∏—Å–∫—É. –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á–µ—Ç —Å 8% –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é –ø—Ä–∏–Ω–µ—Å–µ—Ç {benefit:,.0f} ‚Ç∏/–º–µ—Å. –ù–∞—á–Ω–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å 10,000 ‚Ç∏!",
                f"{name}, –Ω–∞—à –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã—è–≤–∏–ª –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –æ–ø–µ—Ä–∞—Ü–∏—è–º: {insights['investment_operations']} –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥. –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á–µ—Ç —Å –Ω—É–ª–µ–≤—ã–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏ –¥–∞—Å—Ç {benefit:,.0f} ‚Ç∏/–º–µ—Å. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—á–µ—Ç –∑–∞ 5 –º–∏–Ω—É—Ç!",
                f"{name}, –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞–ª: –≤—ã –≥–æ—Ç–æ–≤—ã –∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º —Å –±–∞–ª–∞–Ω—Å–æ–º {client['balance']:,.0f} ‚Ç∏. –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å 8% –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é –ø—Ä–∏–Ω–µ—Å–µ—Ç {benefit:,.0f} ‚Ç∏/–º–µ—Å. –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ - –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ 50,000 ‚Ç∏!"
            ]
        }
        
        # –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if confidence > 0.8:
            template_idx = 0  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
        elif confidence > 0.6:
            template_idx = 1  # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
        else:
            template_idx = 2  # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã
        
        if product in templates:
            return templates[product][template_idx]
        else:
            return f"{name}, –Ω–∞—à –ò–ò –ø–æ–¥–æ–±—Ä–∞–ª –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è. –£–∑–Ω–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!"
    
    def _get_client_insights(self, client):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –æ –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
        insights = {}
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π NaN
        insights['travel_spending'] = client.get('travel_spending', 0) or 0
        insights['travel_ratio'] = client.get('travel_ratio', 0) or 0
        insights['luxury_spending'] = client.get('luxury_spending', 0) or 0
        insights['luxury_ratio'] = client.get('luxury_ratio', 0) or 0
        insights['online_spending'] = client.get('online_spending', 0) or 0
        insights['online_ratio'] = client.get('online_ratio', 0) or 0
        insights['fx_volume'] = client.get('fx_operations', 0) or 0
        insights['fx_ratio'] = client.get('fx_ratio', 0) or 0
        insights['savings_index'] = client.get('savings_index', 0) or 0
        insights['activity_index'] = client.get('activity_index', 0) or 0
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π NaN
        transactions_per_day = client.get('transactions_per_day', 0) or 0
        travel_ratio = client.get('travel_ratio', 0) or 0
        fx_ratio = client.get('fx_ratio', 0) or 0
        investment_ratio = client.get('investment_ratio', 0) or 0
        avg_transaction_amount = client.get('avg_transaction_amount', 0) or 0
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ NaN
        try:
            insights['travel_frequency'] = max(1, int(transactions_per_day * 30 * travel_ratio))
        except (ValueError, TypeError):
            insights['travel_frequency'] = 1
            
        try:
            insights['travel_percentile'] = min(95, int(travel_ratio * 100))
        except (ValueError, TypeError):
            insights['travel_percentile'] = 5
            
        try:
            insights['fx_operations'] = max(1, int(fx_ratio * 10))
        except (ValueError, TypeError):
            insights['fx_operations'] = 1
            
        try:
            insights['investment_operations'] = max(0, int(investment_ratio * 5))
        except (ValueError, TypeError):
            insights['investment_operations'] = 0
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö)
        if travel_ratio > 0.1:
            insights['top_categories'] = "–¢–∞–∫—Å–∏, –û—Ç–µ–ª–∏, –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"
        elif insights['online_ratio'] > 0.3:
            insights['top_categories'] = "–ï–¥–∏–º –¥–æ–º–∞, –°–º–æ—Ç—Ä–∏–º –¥–æ–º–∞, –ò–≥—Ä–∞–µ–º –¥–æ–º–∞"
        elif insights['luxury_ratio'] > 0.1:
            insights['top_categories'] = "–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, –ö–æ—Å–º–µ—Ç–∏–∫–∞, –Æ–≤–µ–ª–∏—Ä–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è"
        else:
            insights['top_categories'] = "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –£—Å–ª—É–≥–∏"
        
        try:
            insights['favorite_spending'] = max(10000, int(avg_transaction_amount * 20))
        except (ValueError, TypeError):
            insights['favorite_spending'] = 10000
        
        return insights
    
    def get_cluster_insights(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º"""
        insights = []
        
        for cluster_id in sorted(self.features_df['cluster'].unique()):
            if cluster_id == -1:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–æ–º–∞–ª–∏–∏
                continue
                
            cluster_data = self.features_df[self.features_df['cluster'] == cluster_id]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞
            avg_age = cluster_data['age'].mean()
            avg_balance = cluster_data['balance'].mean()
            travel_ratio = cluster_data['travel_ratio'].mean()
            online_ratio = cluster_data['online_ratio'].mean()
            luxury_ratio = cluster_data['luxury_ratio'].mean()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–ª–∞—Å—Ç–µ—Ä–∞
            if travel_ratio > 0.3:
                cluster_type = "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏"
                recommended_products = ["–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π", "–û–±–º–µ–Ω –≤–∞–ª—é—Ç"]
            elif luxury_ratio > 0.2:
                cluster_type = "–ü—Ä–µ–º–∏—É–º –∫–ª–∏–µ–Ω—Ç—ã"
                recommended_products = ["–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞", "–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏"]
            elif online_ratio > 0.4:
                cluster_type = "–¶–∏—Ñ—Ä–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"
                recommended_products = ["–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"]
            elif avg_balance > 2000000:
                cluster_type = "–ò–Ω–≤–µ—Å—Ç–æ—Ä—ã"
                recommended_products = ["–î–µ–ø–æ–∑–∏—Ç —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏"]
            else:
                cluster_type = "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"
                recommended_products = ["–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞", "–î–µ–ø–æ–∑–∏—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π"]
            
            insights.append({
                'cluster_id': cluster_id,
                'cluster_type': cluster_type,
                'size': len(cluster_data),
                'avg_age': avg_age,
                'avg_balance': avg_balance,
                'characteristics': {
                    'travel_ratio': travel_ratio,
                    'online_ratio': online_ratio,
                    'luxury_ratio': luxury_ratio
                },
                'recommended_products': recommended_products
            })
        
        return insights

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def quick_ml_analysis():
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Å ML –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    analyzer = MLBankAnalyzer()
    
    if not analyzer.load_data():
        return None
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    analyzer.create_advanced_features()
    
    # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
    analyzer.perform_clustering()
    
    # –û–±—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    accuracy = analyzer.train_product_classifier()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = analyzer.generate_ml_recommendations()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å–∞–π—Ç—ã
    insights = analyzer.get_cluster_insights()
    
    return {
        'recommendations': recommendations,
        'insights': insights,
        'accuracy': accuracy,
        'feature_importance': analyzer.feature_importance.head(10).to_dict('records')
    }

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ ML –∞–Ω–∞–ª–∏–∑–∞ BCC Bank...")
    results = quick_ml_analysis()
    
    if results:
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {results['accuracy']:.3f}")
        print(f"üéØ –°–æ–∑–¥–∞–Ω–æ {len(results['recommendations'])} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(results['insights'])} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        pd.DataFrame(results['recommendations']).to_csv('ml_recommendations.csv', index=False, encoding='utf-8-sig')
        print("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ml_recommendations.csv")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")
